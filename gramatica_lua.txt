
Block => (Stmt;)*

Stmt => Vars = Exps
    |   Function
    |   do Block end
    |   while Exp do BLock end
    |   if Exp then Block (elseif Exp then Block)* Stmt' end  
    |   return Stmt3
    |   break
    |   for Stmt1
    |   local Stmt2
    |   function Name FunctionBody

Stmt' => (else Block)
    | VAZIO

Stmt1 => Name = Exp , Exp Stmt1' do Block end
    |   Names in Exps do Block end

Stmt1' => (, Exp)
    | VAZIO

Stmt2 => function Name FunctionBody
    |   Names = Exps

Stmt3 => Exps
    |   VAZIO

Exps => Exp (,Exp)*

Exp => not Exp Exp'
    |   - Exp Exp'
    |   PrefixExp Exp'
    |   Function Exp'
    |   {T} Exp'
    |   nil Exp'
    |   true Exp'
    |   false Exp'
    |   Number Exp'
    |   String Exp'

T => Field(, Field)* 
    | VAZIO

Exp' =>  BinOp Exp Exp' 
    |   VAZIO

PrefixExp => Name
    |   (Exp)
    |   Name PrefixExp'
    |   (Exp) PrefixExp'

PrefixExp' =>  [Exp]
    | [Exp] PrefixExp'

Field => [Epx] = Exp               
    |   Name = Exp

BinOp => or 
    | and 
    | < BinOp'
    | > BinOp'
    | ~= 
    | == 
    | . . 
    | + 
    | - 
    | * 
    | / 
    | ^ 

BinOp' => = | VAZIO    

Vars => Var (,Var)*

Var => Name
    |   PrefixExp [Exp]

Function => FunctionBody
    |   FunctionBody Function

FunctionBody => Name (Params) Block end

Params => Names | VAZIO

Names => Name (, Name)*